#include <linux/init.h>
#include <linux/module.h>
#include <linux/printk.h>
#include <linux/fs.h>
#include <linux/uaccess.h>
#include <asm/io.h>
#include <linux/device.h>
#define NAME "chrdev_dev"

//定义宏保存物理地址基地址
#define RED_BASE 0xc001a000
#define GREEN_BASE 0xc001e000
#define BLUE_BASE 0xc001b000
#define BUZ1_BASE 0xc001C000

//定义指针保存映射后的虚拟地址首地址
unsigned int *red_addr=NULL;
unsigned int *blue_addr=NULL;
unsigned int *green_addr=NULL;
unsigned int *buz1_addr=NULL;

struct class *cls=NULL;
struct device *dev=NULL;

int major = 0;
char kbuf[32];
char kbuf_r[32]="welcome to hqyj!";

//open  read  write  close
int myopen(struct inode *node, struct file *file_t)
{
    printk("%s %s %d\n", __FILE__, __func__, __LINE__);
    return 0;
}
/* ssize_t myread(struct file *file_t, char __user *ubuf, size_t size, loff_t *off_t)
{
    printk("%s %s %d\n", __FILE__, __func__, __LINE__);
    //将内核空间数据拷贝到用户空间
    if(sizeof(kbuf_r)<size)
       size=sizeof(kbuf_r);
    if(copy_to_user(ubuf,kbuf_r,size)!=0)
    {
         printk("copy_to_user err.");
         return -EINVAL ;
    }
    return 0;
}
ssize_t mywrite(struct file *file_t, const char __user *ubuf, size_t size, loff_t *off_t)
{
    printk("%s %s %d\n", __FILE__, __func__, __LINE__);
     //将用户空间-（ubuf） 的数据拷贝到内核空间(kbuf)
     if(sizeof(kbuf)<size)
        size=sizeof(kbuf);
     if(copy_from_user(kbuf,ubuf,size)!=0)
     {
         printk("copy_from_user err.");
         return -EINVAL ;
     }  
     printk("kbuf=%s\n",kbuf);
     if(kbuf[0]==1)
     {//红灯开
        *red_addr |= (1<<28);
     }else if(kbuf[0]==0)
     {//红灯关
        *red_addr &= (~(1<<28));
     }
     if(kbuf[1]==1)
     {//lv灯开
        *green_addr |= (1<<13);
     }else if(kbuf[1]==0)
     {//lv灯关
        *green_addr &= (~(1<<13));
     }
     if(kbuf[2]==1)
     {//blue灯开
        *blue_addr |= (1<<12);
     }else if(kbuf[2]==0)
     {//blue灯关
        *blue_addr &= (~(1<<12));
     }
     if (kbuf[3]==1)
     {
        *buz1_addr |= (1<<14);
     }else if (kbuf[3]==0)
     {
         *buz1_addr &= (~(1<<14));
     }
     
     
    return 0;
}*/

int myclose(struct inode *node, struct file *file_t)
{
    printk("%s %s %d\n", __FILE__, __func__, __LINE__);
    return 0;
}

struct file_operations fops = {
    .open = myopen,
    .release = myclose,
};

static int __init chrdev_init(void)
{
    printk("%s %s %d\n", __FILE__, __func__, __LINE__);
    //注册字符设备驱动
    major=register_chrdev(major, NAME, &fops);
    if(major < 0)
    {
        printk("register_chrdev err.\n");
        return -EINVAL ;
    }
    
    //建立虚拟地址和物理地址之间的映射关系-控制红灯
    red_addr=(unsigned int *)ioremap(RED_BASE,40);
    if(red_addr == NULL)
    {
         printk("ioremap red err.\n");
         return -EINVAL ;
    }
    green_addr=(unsigned int *)ioremap(GREEN_BASE,40);
    if(green_addr == NULL)
    {
         printk("ioremap red err.\n");
         return -EINVAL ;
    }
    blue_addr=(unsigned int *)ioremap(BLUE_BASE,40);
    if(blue_addr == NULL)
    {
         printk("ioremap red err.\n");
         return -EINVAL ;
    }
    buz1_addr=(unsigned int *)ioremap(BUZ1_BASE,40);
    if(buz1_addr == NULL)
    {
         printk("ioremap red err.\n");
         return -EINVAL ;
    }
    //初始化红灯
    *(red_addr+9) &= (~(3<<24));//选择GPIOA28功能 
    *(red_addr+1) |= (1<<28); //选择输出使能

    *red_addr &= (~(1<<28)); //红灯关闭
//初始化green灯
    *(green_addr+8) &= (~(3<<26));
    *(green_addr+1) |= (1<<13);

  /* *green_addr |=  0xC001B020;
     *green_addr |=  0xC001B000;*/

//初始化blue灯

    *(blue_addr+8) |= (1<<25);
    *(blue_addr+8) &= (~(1<<24));
    *(blue_addr+1) |= (1<<12);


//蜂名器
    // *(buz1_addr+8) &= (~(1<<29));
    // *(buz1_addr+8) |= (1<<28);

    /**blue_addr |= 0xC001E020;
    *blue_addr |= 0xC001E000;*/

    //自动创建设备节点
    //1.提交目录信息
    cls=class_create(THIS_MODULE,NAME);
    if(IS_ERR(cls))
    {
         printk("class create err.\n");
         return -EINVAL ;
    }
    //2.提交文件信息
    dev=device_create(cls,NULL,MKDEV(major,0),NULL,"led");
    if(IS_ERR(dev))
    {
         printk("device create err.\n");
         return -EINVAL ;
    }
    return 0;
}
static void __exit chrdev_exit(void)
{
    printk("%s %s %d\n", __FILE__, __func__, __LINE__);

    device_destroy(cls, MKDEV(major,0));
    class_destroy(cls);

    //取消映射
    iounmap(red_addr);
    iounmap(blue_addr);
    iounmap(green_addr);
    //注销字符设备驱动
    unregister_chrdev(major,NAME);
}

module_init(chrdev_init);
module_exit(chrdev_exit);
MODULE_LICENSE("GPL");